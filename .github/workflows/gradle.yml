name: Talmorella

env:
  PROD_DB_URL: ${{ secrets.PROD_DB_URL }}
  PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
  PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}

# main branch에 push를 날릴 경우 GitHub Action을 실행
on:
  push:
    branches: [ test ] 

jobs:
  build:
    runs-on: ubuntu-latest

		# github repository에 접근하기 위해 check-out 하는 GitHub Action 공식 작업
		# link : https://github.com/actions/checkout
    steps:
      - name: Checkout
        uses: actions/checkout@v3
				
			# java version을 다운받고 setting 및 다른 부가 기능을 한다
			# link : https://github.com/actions/setup-java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt' #OpenJDK HotSpot을 사용한다
          java-version: '17'

			# gradlew를 실행시키기 위해 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

			# 요건 github action이 제공하는 스크립트 가져왔다
			# 기존 build한 파일이 존재한다면 캐싱하여 build 속도를 높일 수 있다~
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build

			# docker container builder driver를 사용하여 builder를 만들고 부팅
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

			# docker hub 대한 로그인 처리
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

			# docker image생성하고 DockerHub에 push 한다
      - name: Build and push to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_TAG }}
          
